if(!require(ggplot2)) install.packages("ggplot2") else library(ggplot2)
if(!require(ggalt)) install.packages("ggalt") else library(ggalt)
if(!require(dplyr)) install.packages("dplyr") else library(dplyr)
if(!require(tidyverse)) install.packages("tidyverse") else library(tidyverse)
if(!require(gridExtra)) install.packages("gridExtra") else library(gridExtra)
if(!require(grid)) install.packages("grid") else library(grid)
if(!require(xlsx)) install.packages("xlsx") else library(xlsx)
if(!require(openxlsx)) install.packages("openxlsx") else library(openxlsx)
if(!require(corrplot)) install.packages("corrplot") else library(corrplot)
if(!require(kableExtra)) install.packages("kableExtra") else library(kableExtra)
if(!require(psych)) install.packages("psych") else library(psych)
if(!require(mvShapiroTest)) install.packages("mvShapiroTest") else library(mvShapiroTest)
if(!require(MVar.pt)) install.packages(MVar.pt) else library(MVar.pt)
if(!require(kableExtra)) install.packages("kableExtra") else library(kableExtra)
if(!require(ppclust)) install.packages("ppclust") else library("ppclust")
if(!require(NbClust)) install.packages("NbClust") else library("NbClust")
if(!require(packHV)) install.packages("packHV") else library(packHV)
if(!require(readxl)) install.packages("reaxl") else library(readxl)
if(!require(MASS)) install.packages("MASS") else library(MASS)
if(!require(exploreR)) install.packages("exploreR") else library(exploreR)
if(!require(Hmisc)) install.packages("misc") else library(Hmisc)
if(!require(moments)) install.packages(moments) else require(moments)
if(!require(openxlsx)) install.packages(openxlsx) else require(openxlsx)
if(!require(nortest)) install.packages(nortest) else require(nortest)
if(!require(lmtest)) install.packages(lmtest) else require(lmtest)
if(!require(forecast)) install.packages(forecast) else require(forecast)
if(!require(lubridate)) install.packages(lubridate) else library(lubridate)
#library(xlsx)
if(!require(RColorBrewer)) install.packages("RColorBrewer") else library(RColorBrewer)
#library(rcompanion)
require(ggpubr)
if(!require(rbcb)) install.packages("rbcb") else library(rbcb)
if(!require(qqplotr)) install.packages("qqplotr") else library(qqplotr)
if(!require(car)) install.packages("car") else library(car)
if(!require(pROC)) install.packages("pROC") else library(pROC)
#if(!require()) install.packages("") else library()
install.packages("car")
knitr::opts_chunk$set(
echo = TRUE,
warning = FALSE,
message = FALSE
)
setwd("~/Library/CloudStorage/OneDrive-Pessoal/Documentos/7. Especialização/1. Disciplinas/REGRESSÃO NÃO-LINEAR/Aula2/2022_Aula02")
dados_motorins <- read.csv("motorins.dat", sep="")
install.packages("RODBC")
library(RODBC)
dados <- read_excel("C:\Users\SE-IgorResende\Documents\OneDrive\Documentos\7. Especialização\3. TCC\3. Códigos\tccBaseCompilada_TS14_2022.xlsx",
dados <- read_excel("C:Users/SE-IgorResende/Documents/OneDrive/Documentos/7. Especialização/3. TCC/3. Códigos/tccBaseCompilada_TS14_2022.xlsx",
sheet = "DadosEscores")
library(readxl)
dados <- read_excel("C:Users/SE-IgorResende/Documents/OneDrive/Documentos/7. Especialização/3. TCC/3. Códigos/tccBaseCompilada_TS14_2022.xlsx",
sheet = "DadosEscores")
library(readxl)
dados <- read_excel("C:/Users/SE-IgorResende/Documents/OneDrive/Documentos/7. Especialização/3. TCC/3. Códigos/tccBaseCompilada_TS14_2022.xlsx",
sheet = "DadosEscores")
library(lmtest)
lmtest::bptest(modelo)
library(readr)
export1 <- read_csv("C:/Users/SE-IgorResende/Downloads/export-DTP_003_PRM_NO_WHERE-2023-04-17.csv.crdownload")
View(export1)
export1$
with(export1,boxplot(export1$state))
export1$
boxplot(export1$state)
export1$
?graphics::boxplot()
?graphics::boxplot()
View(export1)
export1$count = 1
graphics::boxplot(state ~ count,data = export1 )
graphics::boxplot(count ~ state,data = export1)
packHV::hist_boxplot(export1$state)
plot(export1$state,export1$count)
plot(export1$state,export1$count)
plot(export1$state ~ export1$count)
library(ggplot2)
ggplot2::ggplot(data = export1,mapping = aes(state, count))+
geom_bar()
ggplot2::ggplot(data = export1,mapping = aes(state, count))+
geom_col()
rm(list = ls(all = TRUE))
if(!require(scales)) install.packages("scales") else library(scales)
if(!require(boot)) install.packages("boot") else library(boot)
if(!require(janitor)) install.packages("janitor") else library(janitor)
if(!require(ggplot2)) install.packages("ggplot2") else library(ggplot2)
if(!require(ggalt)) install.packages("ggalt") else library(ggalt)
if(!require(dplyr)) install.packages("dplyr") else library(dplyr)
if(!require(tidyverse)) install.packages("tidyverse") else library(tidyverse)
if(!require(xlsx)) install.packages("xlsx") else library(xlsx)
if(!require(openxlsx)) install.packages("openxlsx") else library(openxlsx)
if(!require(corrplot)) install.packages("corrplot") else library(corrplot)
if(!require(mvShapiroTest)) install.packages("mvShapiroTest") else library(mvShapiroTest)
if(!require(MVar.pt)) install.packages(MVar.pt) else library(MVar.pt)
if(!require(packHV)) install.packages("packHV") else library(packHV)
if(!require(readxl)) install.packages("reaxl") else library(readxl)
if(!require(MASS)) install.packages("MASS") else library(MASS)
if(!require(exploreR)) install.packages("exploreR") else library(exploreR)
if(!require(openxlsx)) install.packages(openxlsx) else require(openxlsx)
if(!require(lmtest)) install.packages(lmtest) else require(lmtest)
if(!require(forecast)) install.packages(forecast) else require(forecast)
if(!require(RColorBrewer)) install.packages("RColorBrewer") else library(RColorBrewer)
if(!require(lpSolve)) install.packages("lpSolve") else library (lpSolve)
if(!require(lmtest)) install.packages("lmtest") else library(lmtest)
label_reais <- function(x) {
paste0("R$ ", comma(x, big.mark = ".", decimal.mark = ","))
}
label_dots <- function(x) {
paste0(comma(x, big.mark = ".", decimal.mark = ","))
}
library(readxl)
dados <- read_excel("BaseCompilada_TS14_2022.xlsx",
sheet = "DadosEscores")
setwd("~/OneDrive/Documentos/7. Especialização/3. TCC/3. Códigos/tcc")
setwd("~/OneDrive/Documentos/7. Especialização/3. TCC/3. Códigos/tcc")
dados <- read_excel("BaseCompilada_TS14_2022.xlsx",
sheet = "DadosEscores")
### Transformação do IdAgente as char
dados$IdAgente = as.character(dados$IdAgente)
### dataset com variáveis do modelo
db = with(dados,dplyr::select(dados, Concessionaria, Tipo,
Ano, PMSO, rede.menor.230,
rede.maior.230,MVA,Mvar,
modulos.sub.menor230,modulos.sub.maior230,
modulos.manobra.menor230,modulos.manobra.maior230))
modelo_mass = masslm(db[,4:12], "PMSO")
modelo_mass =  as.data.frame(modelo_mass)
modelo_mass = modelo_mass[order(modelo_mass$R.squared,decreasing = TRUE),]
colnames(db)[colnames(db) == modelo_mass$IV[1]] = "X1"
colnames(db)[colnames(db) == modelo_mass$IV[2]] = "X2"
colnames(db)[colnames(db) == modelo_mass$IV[3]] = "X3"
colnames(db)[colnames(db) == modelo_mass$IV[4]] = "X4"
colnames(db)[colnames(db) == modelo_mass$IV[5]] = "X5"
colnames(db)[colnames(db) == modelo_mass$IV[6]] = "X6"
colnames(db)[colnames(db) == modelo_mass$IV[7]] = "X7"
colnames(db)[colnames(db) == modelo_mass$IV[8]] = "X8"
yfit1 <- rep(NA,nrow(db))
for(emp in unique(db$Concessionaria)){
emp
pos   <- which(db$Concessionaria == emp)
train1 <- db[-pos,]
test1  <- db[pos,]
modelo1 <- lm(PMSO ~ X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8,data=train1)
modelo_1<- stepAIC(modelo1, trace=TRUE)
#yfit1[pos] <- predict(modelo1, newdata=test1, type="response")
}
for(emp in unique(db$Concessionaria)){
print(emp)
pos   <- which(db$Concessionaria == emp)
train1 <- db[-pos,]
test1  <- db[pos,]
modelo1 <- lm(PMSO ~ X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8,data=train1)
modelo_1<- stepAIC(modelo1, trace=TRUE)
#yfit1[pos] <- predict(modelo1, newdata=test1, type="response")
}
rm(emp,pos,train1,test1,modelo_1,modelo1)
print(emp)
unique(db$Concessionaria
unique(db$Concessionaria)
unique(db$Concessionaria)
vec1 = unique(db$Concessionaria)
vec1
f
for(emp in unique(db$Concessionaria)){
print(emp)
pos   <- which(db$Concessionaria == emp)
train1 <- db[-pos,]
test1  <- db[pos,]
modelo1 <- lm(PMSO ~ X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8,data=train1)
modelo_1<- stepAIC(modelo1, trace=TRUE)
#yfit1[pos] <- predict(modelo1, newdata=test1, type="response")
}
modelo_1$rank
modelo_1$model
modelo_1$anova
modelo_1$coefficients
modelo_1$anova$AIC
print(vec1)
modelo1 <- lm(PMSO ~ .,data=train1)
modelo_1<- stepAIC(modelo1, trace=TRUE)
rm(emp,pos,train1,test1,modelo_1,modelo1)
for(emp in vec1){
print(vec1)
# pos   <- which(db$Concessionaria == emp)
# train1 <- db[-pos,]
# test1  <- db[pos,]
#
# modelo1 <- lm(PMSO ~ .,data=train1)
# modelo_1<- stepAIC(modelo1, trace=TRUE)
#yfit1[pos] <- predict(modelo1, newdata=test1, type="response")
}
rm(emp,pos,train1,test1,modelo_1,modelo1)
rm(emp)
for(emp in vec1){
print(vec1)
# pos   <- which(db$Concessionaria == emp)
# train1 <- db[-pos,]
# test1  <- db[pos,]
#
# modelo1 <- lm(PMSO ~ .,data=train1)
# modelo_1<- stepAIC(modelo1, trace=TRUE)
#yfit1[pos] <- predict(modelo1, newdata=test1, type="response")
}
rm(emp)
for(emp in vec1){
print(emp)
# pos   <- which(db$Concessionaria == emp)
# train1 <- db[-pos,]
# test1  <- db[pos,]
#
# modelo1 <- lm(PMSO ~ .,data=train1)
# modelo_1<- stepAIC(modelo1, trace=TRUE)
#yfit1[pos] <- predict(modelo1, newdata=test1, type="response")
}
rm(emp)
for(emp in vec1){
pos   <- which(db$Concessionaria == emp)
train1 <- db[-pos,]
test1  <- db[pos,]
modelo1 <- lm(PMSO ~ .,data=train1)
modelo_1<- stepAIC(modelo1, trace=TRUE)
print(emp)
print(modelo_1$anova$AIC)
#yfit1[pos] <- predict(modelo1, newdata=test1, type="response")
}
